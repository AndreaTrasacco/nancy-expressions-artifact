#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

This notebook contains examples highlighting the flexibility of the visualization of DNC expressions usig *Nancy.Expressions*.

#!pwsh

# Compile the Nancy.Expression library
# Warning: if you modified the source, restart the notebook kernel before re-compiling! Use ctrl+shift+P to find this command in VS Code
dotnet publish -c Release ../../Nancy.Expressions/Nancy.Expressions.sln -f net8.0

#!csharp

// Load libraries and other dependencies 
#r "nuget: Unipi.Nancy.Interactive"
#r "../../Nancy.Expressions/Nancy.Expressions/bin/Release/net8.0/Unipi.Nancy.Expressions.dll"
#r "../../Nancy.Expressions/Nancy.Expressions.Interactive/bin/Release/net8.0/Unipi.Nancy.Expressions.Interactive.dll"

// Nancy
using Unipi.Nancy.Numerics;
using Unipi.Nancy.MinPlusAlgebra;
using Unipi.Nancy.NetworkCalculus;
using Unipi.Nancy.Interactive;

// Nancy.Expressions
using Unipi.Nancy.Expressions;
using Unipi.Nancy.Expressions.Visitors;

Unipi.Nancy.Expressions.Interactive.NancyExpressionKernelExtension.Load(Microsoft.DotNet.Interactive.KernelInvocationContext.Current.HandlingKernel.RootKernel);

#!markdown

The following code cell constructs the DNC expression $(\overline{f} \otimes g) \oslash \overline{f}$.

#!csharp

var f = Expressions.FromCurve(
    curve: new Curve(
        baseSequence: new Sequence(new Element[]
        {
            new Point(time: 0, value: 0),
            new Segment(startTime: 0, endTime: 2, rightLimitAtStartTime:0, slope: 1),
            new Point(2, 2),
            new Segment(2,  3, 2, 0),
            new Point(3, 2),
            new Segment(3, 4, 2, 1)
        }),
        pseudoPeriodStart: 2,
        pseudoPeriodLength: 2,
        pseudoPeriodHeight: 1
    ), 
    name: "f");
var g = Expressions.FromCurve(
    curve: new Curve(
        baseSequence: new Sequence(new Element[]
        {
            new Point(time: 0, value: 0),
            new Segment(startTime: 0, endTime: 1, rightLimitAtStartTime:0, slope: 3),
            new Point(1, 3),
            new Segment(1,  5, 1, 0),
            new Point(5, 3),
            new Segment(5, 6, 5, 3)
        }),
        pseudoPeriodStart: 1,
        pseudoPeriodLength: 5,
        pseudoPeriodHeight: 3
    ),
    name: "g");
var f_sac = f.SubAdditiveClosure();
var conv = Expressions.Convolution(f_sac, g);
var deconv = Expressions.Deconvolution(conv, f_sac);

#!markdown

*Nancy.Expressions* allows visualization of expressions using either plaintext, suitable for CLI environments, or LaTeX syntax, useful for environments that can render it, such as interactive notebooks.

#!csharp

Console.WriteLine(deconv); // plaintext syntax
display(deconv); // LaTeX syntax

#!markdown

Another kind of flexibility is provided by allowing to print DNC expressions at different levels of detail. This feature is especially useful when expressions are huge and difficult to read if fully printed.

#!markdown

To provide such feature each method for the construction of the expressions allows the user to specify the expression name. Therefore, when visualizing an expression the user can select the depth at which the expression tree must be fully expanded: this means that operations before said depth will be printed esplicitly, deeper operations, instaed, will be hidden and collapsed by printing only the expression name (if set) of nodes at said depth.

#!markdown

The next code cell shows how to specify the name of the expressions (and sub-expressions) being constructed.

#!csharp

Curve beta1 = new RateLatencyServiceCurve(1,1);
Curve beta2 = new RateLatencyServiceCurve(1,1);
Curve beta3 = new RateLatencyServiceCurve(1,1);
Curve beta4 = new RateLatencyServiceCurve(1,1);
Curve alpha1 = new SigmaRhoArrivalCurve(1,1);
Curve alpha3 = new SigmaRhoArrivalCurve(1,1);
Curve alpha4 = new SigmaRhoArrivalCurve(1,1);

var exprLeft = Expressions.Subtraction(beta1, alpha1, expressionName:"subL")
    .ToUpperNonDecreasing()
    .ToNonNegative();

var  b3 = Expressions.FromCurve(beta3);
var temp1 = Expressions.Addition(alpha3, alpha4).WithName("add")
    .Deconvolution(b3, expressionName:"deconv");
var exprRight = Expressions.Subtraction(beta4, temp1, expressionName:"subR")
    .ToUpperNonDecreasing()
    .ToNonNegative();

var finalExpr =  Expressions.Convolution(exprLeft, exprRight, expressionName:"conv");

#!markdown

Now, we print the final expression at different levels of detail.

#!csharp

Console.WriteLine("Depth " + 3 + ": " + finalExpr.ToUnicodeString(3));
Console.WriteLine("Depth " + 4 + ": " + finalExpr.ToUnicodeString(4));
Console.WriteLine("Depth " + 5 + ": " + finalExpr.ToUnicodeString(5));
Console.WriteLine("Depth " + 6 + ": " + finalExpr.ToUnicodeString(6));
